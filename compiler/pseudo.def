{ pseudo.def - pseudo ocpodes }
type
  {<<<}
  { Operators emitted by travrs, read by code }
  pseudoop = (bad, addint, addptr, addr, addreal, addset, addstr, aindx, andint,
              arraystr, blockcode, blockentry, blockexit, callroutine,
              casebranch, caseelt, caseerr, castfptrint, castint, castintfptr,
              castintptr, castptr, castptrint, castreal, castrealint, chrstr,
              clearlabel, closerange, commafake, compbool, compint, congruchk,
              copyaccess, copystack, createfalse, createtemp, createtrue,
              cvtdr, cvtrd, dataadd, dataaddr, dataend, datafaddr, datafield,
              datafill, dataint, datareal, datastart, datastore, datastruct,
              datasub, decint, defforindex, defforlitindex, definelazy,
              defunsforindex, defunsforlitindex, divint, divreal, divset,
              doext, dofptr, dofptrvar, doint, dolevel, doorigin, doown,
              doptr, doptrvar, doreal, doretptr, doseg, doset, dostruct,
              dotemp, dounsvar, dovar, dummyarg, dummyarg2, endpseudocode,
              endreflex, eqfptr, eqint, eqlitfptr, eqlitint, eqlitptr,
              eqlitreal, eqptr, eqreal, eqset, eqstr, eqstruct, flt, fmt,
              fordnbottom, fordnchk, fordnimproved, fordntop, forerrchk,
              forupbottom, forupchk, forupimproved, foruptop, geqint,
              geqlitint, geqlitptr, geqlitreal, geqptr, geqreal, geqset,
              geqstr, geqstruct, getquo, getrem, gtrint, gtrlitint, gtrlitptr,
              gtrlitreal, gtrptr, gtrreal, gtrstr, gtrstruct, incint, incstk,
              indx, indxchk, indxindr, inset, joinlabel, jointemp, jump,
              jumpf, jumpvfunc, jumpt, kwoint, leqint, leqlitint, leqlitptr,
              leqlitreal, leqptr, leqreal, leqset, leqstr, leqstruct,
              loopholefn, lssint, lsslitint, lsslitptr, lsslitreal, lssptr,
              lssreal, lssstr, lssstruct, makeroom, modint, movcstruct,
              movint, movlitint, movlitptr, movlitreal, movptr, movreal,
              movset, movstr, movstruct, mulint, mulreal, mulset, negint,
              negreal, neqfptr, neqint, neqlitfptr, neqlitint, neqlitptr,
              neqlitreal, neqptr, neqreal, neqset, neqstr, neqstruct,
              openarray, orint, paindx, pascalgoto, pascallabel, pindx,
              postint, postptr, postreal, preincptr, pseudolabel, pshaddr,
              pshfptr, pshint, pshlitfptr, pshlitint, pshlitptr, pshlitreal,
              pshproc, pshptr, pshreal, pshretptr, pshset, pshstr, pshstraddr,
              pshstruct, ptrchk, ptrtemp, rangechk, rdbin, rdchar, rdint,
              rdreal, rdst, rdxstr, realtemp, regtemp, restorelabel,
              restoreloop, returnfptr, returnint, returnptr, returnreal,
              returnstruct, savelabel, saveactkeys, setbinfile, setfile,
              setinsert, shiftlint, shiftrint, stacktarget, startreflex,
              stddivint, stdmodint, stmtbrk, subint, subptr, subreal, subset,
              sysfnint, sysfnreal, sysfnstring, sysroutine, temptarget,
              unscallroutine, wrbin, wrbool, wrchar, wrint, wrreal, wrst,
              wrxstr, xorint);
  {>>>}
  keyindex = - keysize..keysize; {actual key table index}

  pseudoRecordType = packed record
    case boolean of
      true:  (byte: hostfilebyte); { integer data}
      false: (op: pseudoop);       { operator from travrs}
    end;

  pseudoFileType = file of packed record
                   block:  packed array [0..diskbufsize] of pseudoRecordType;
                   end;

  {<<<}
  pseudocode = record { no need to pack }
               len: integer;       { operand length }
               op: pseudoop;       { operator }
               key: keyindex;      { node label for flattened tree }
               refcount: integer;  { number of references to this node }
               copycount: integer; { number of copies of this node }
               oprnds: array [1..3] of integer { misc. operands }
               end;
  {>>>}

  pseudoSharedType = record
                   pseudoFile: pseudoFileType;
                   pseudoinst: pseudocode; { next pseudo-instruction }
                   pseudobuff: pseudocode; { next + 1 pseudo-instruction }
                   end;
  pseudoSharedPtrType = ^pseudoSharedType;

{ interface }
function getPseudoSharedPtr : pseudoSharedPtrType; external;
